# app

import streamlit as st
from agents import idea_expert, market_expert, plan_expert
from tasks import idea_task, market_task, plan_task
from crewai import Crew, Process
from datetime import datetime
import zipfile
import io

def create_zip_of_outputs(file_paths, dynamic_filename):
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w") as zip_file:
        for file_path in file_paths:
            zip_file.write(file_path, arcname=file_path.split("/")[-1])  # Just the filename in zip
    zip_buffer.seek(0)
    return zip_buffer

st.title("🚀 AI Startup Planner")

st.markdown("""
💡 **Plan your Startup with AI!**  
Enter your startup details below and get:  
- Refined idea 💭  
- Market analysis 📊 (with competitor search)  
- Step-by-step action plan 📝  
""")

# Inputs
startup_idea = st.text_area("💭 Your Startup Idea", "AI tool for small businesses")
target_audience = st.text_input("👥 Target Audience", "Small business owners")
budget = st.text_input("💸 Estimated Budget", "50000 INR")

if st.button("🚀 Generate Startup Plan"):
    if not startup_idea or not target_audience or not budget:
        st.error("⚠️ Please fill in all fields before generating your plan.")
    else:
        
        with st.expander("ℹ️ Disclaimer", expanded=True):
            st.markdown("""
            **Important Notice**  
            The content generated by this application is intended for informational and exploratory purposes only.  
            It is based on user inputs and AI-generated responses, which may not always be accurate, complete, or reliable.  
            Please do **not** implement any suggestions or ideas from this app **without conducting your own research and professional consultation**.  
            The creators of this app are not responsible for any decisions made based on its output.
            """)

        st.write("⏳ AI is preparing your startup plan... Please wait.")

        # Define tasks with chaining
        task1 = idea_task(idea_expert, startup_idea)
        task2 = market_task(market_expert, startup_idea="{task1.output}", target_audience=target_audience)
        task3 = plan_task(plan_expert, startup_idea="{task1.output}", target_audience="{task2.output}", budget=budget)

        # Step 2: Pass previous tasks as context (only the actual task instances)
        task2.context = [task1]
        task3.context = [task1, task2]

        # Define Crew
        crew = Crew(
            agents=[idea_expert, market_expert, plan_expert],
            tasks=[task1, task2, task3],
            process=Process.sequential,
            verbose=True
        )

        # Run Crew
        result = crew.kickoff()

        st.success("✅ All agents' tasks completed!")

        st.markdown(str(result))

        # Download button
        # List of output files from your tasks
        file_paths = [
            "outputs/refined_idea.md",
            "outputs/market_analysis.md",
            "outputs/startup_plan.md"
        ]

        # Create the ZIP file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")  # e.g., 20250916_144230
        dynamic_filename = f"startup_kit_{timestamp}.zip"

        zip_file = create_zip_of_outputs(file_paths, dynamic_filename)

        # Download button
        st.download_button(
            label="📦 Download All Startup Files (ZIP)",
            data=zip_file,
            file_name=dynamic_filename,
            mime="application/zip"
        )

